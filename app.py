import streamlit as st
from PIL import Image
import os
from google import genai
from google.genai import types
from datetime import datetime
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="MaisGestorHealth",
    layout="centered",
)

def analyze_conversation_to_soap(conversation_text):
    """
    Analisa a conversa m√©dica usando Google Gemini 2.5 e converte para formato SOAP
    """
    if not conversation_text.strip():
        return None
    
    # Obter API key da vari√°vel de ambiente
    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        st.error("‚ùå API Key do Gemini n√£o encontrada. Verifique se a vari√°vel GEMINI_API_KEY est√° configurada no arquivo .env")
        return None
    
    try:
        # Configurar cliente do Gemini
        client = genai.Client(api_key=api_key)
        
        # Prompt espec√≠fico para an√°lise SOAP
        prompt = f"""
        Analise a seguinte transcri√ß√£o de consulta m√©dica e organize as informa√ß√µes no formato SOAP m√©dico padr√£o.
        
        TRANSCRI√á√ÉO:
        {conversation_text}
        
        Organize as informa√ß√µes nos seguintes campos OBRIGAT√ìRIOS:
        
        SUBJETIVO (S):
        - Liste todos os sintomas, queixas e hist√≥rico relatados pelo paciente
        - Inclua in√≠cio dos sintomas, intensidade, localiza√ß√£o, fatores de melhora/piora
        - Use bullet points para cada informa√ß√£o
        
        OBJETIVO (O):
        - Liste sinais vitais (PA, FC, FR, Tax, SatO2)
        - Exame f√≠sico por sistemas (inspe√ß√£o, palpa√ß√£o, percuss√£o, ausculta)
        - Dados antropom√©tricos se mencionados
        - Use bullet points para cada informa√ß√£o
        
        AVALIA√á√ÉO (A):
        - DIAGN√ìSTICO PRINCIPAL ou hip√≥tese diagn√≥stica mais prov√°vel (seja espec√≠fico, evite termos gen√©ricos)
        - Diagn√≥sticos diferenciais se aplic√°vel
        - Justificativa baseada nos achados do subjetivo e objetivo
        - CID-10 se poss√≠vel identificar
        - Use bullet points para cada informa√ß√£o
        
        PLANO (P):
        - Tratamento medicamentoso com posologia espec√≠fica
        - Exames complementares solicitados
        - Orienta√ß√µes e cuidados gerais
        - Retorno e acompanhamento
        - Encaminhamentos se necess√°rio
        - Use bullet points para cada item
        
        IMPORTANTE: Na se√ß√£o AVALIA√á√ÉO, sempre forne√ßa um diagn√≥stico espec√≠fico baseado nos sintomas e achados apresentados. Evite termos vagos como "a esclarecer" ou "aguardar exames".
        
        Responda APENAS com as 4 se√ß√µes organizadas, sem explica√ß√µes adicionais.
        """
        
        model = "gemini-2.5-flash-preview-05-20"
        contents = [
            types.Content(
                role="user",
                parts=[
                    types.Part.from_text(text=prompt),
                ],
            ),
        ]
        generate_content_config = types.GenerateContentConfig(
            response_mime_type="text/plain",
        )

        # Gerar resposta usando stream
        response_text = ""
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            response_text += chunk.text
        
        # Processar a resposta para extrair as se√ß√µes SOAP
        sections = {
            "subjetivo": "",
            "objetivo": "",
            "avaliacao": "",
            "plano": ""
        }
        
        current_section = None
        lines = response_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if 'SUBJETIVO' in line.upper() or line.upper().startswith('S'):
                current_section = "subjetivo"
                continue
            elif 'OBJETIVO' in line.upper() or line.upper().startswith('O'):
                current_section = "objetivo"
                continue
            elif 'AVALIA√á√ÉO' in line.upper() or 'AVALIACAO' in line.upper() or line.upper().startswith('A'):
                current_section = "avaliacao"
                continue
            elif 'PLANO' in line.upper() or line.upper().startswith('P'):
                current_section = "plano"
                continue
            elif current_section and line:
                sections[current_section] += line + "\n"
        
        # Limpar as se√ß√µes
        for key in sections:
            sections[key] = sections[key].strip()
        
        return sections
        
    except Exception as e:
        st.error(f"Erro ao processar com Gemini: {str(e)}")
        return None

def main():
    # Header com logo e t√≠tulo
    st.markdown("### MaisGestorHealth")
    st.markdown("**An√°lise Inteligente de Consultas M√©dicas em Formato SOAP**")
    
    # Verificar se o logo existe e exibi-lo
    if os.path.exists("logo.png"):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            image = Image.open("logo.png")
            st.image(image, width=120)
    
    st.markdown("---")
    
    # Campo de texto para a transcri√ß√£o
    st.markdown("**üìù Transcri√ß√£o da Consulta**")
    conversation_text = st.text_area(
        "Transcri√ß√£o da Consulta",
        placeholder="Cole aqui a transcri√ß√£o completa da consulta m√©dica...\n\nExemplo:\nM√©dico: Boa tarde! Como posso ajud√°-lo hoje?\nPaciente: Doutor, estou com uma dor de cabe√ßa muito forte h√° 3 dias...",
        height=200,
        label_visibility="collapsed"
    )
    
    # Bot√£o de an√°lise
    analyze_button = st.button("üîç Analisar Consulta", type="primary")
    
    # Informa√ß√£o sobre o formato SOAP
    st.info("""
**üìã Sobre o formato SOAP:**  
**S**ubjetivo - Sintomas e queixas relatadas pelo paciente  
**O**bjetivo - Sinais vitais, exame f√≠sico e dados observ√°veis  
**A**valia√ß√£o - Diagn√≥stico ou hip√≥tese diagn√≥stica  
**P**lano - Tratamento, exames complementares e orienta√ß√µes
    """)
    
    # Processamento e exibi√ß√£o dos resultados
    if analyze_button:
        if not conversation_text.strip():
            st.warning("‚ö†Ô∏è Por favor, insira a transcri√ß√£o da consulta antes de analisar.")
        else:
            with st.spinner("ü§î Analisando consulta com IA..."):
                soap_result = analyze_conversation_to_soap(conversation_text)
                
                if soap_result:
                    st.markdown("---")
                    st.markdown("### üìã An√°lise SOAP")
                    st.markdown("*Resultado da an√°lise autom√°tica com Intelig√™ncia Artificial*")
                    st.markdown("")
                    
                    # Exibir cada se√ß√£o do SOAP em expanderes estilizados
                    sections = [
                        ("üó£Ô∏è SUBJETIVO", soap_result["subjetivo"], "Sintomas e queixas relatadas pelo paciente"),
                        ("üîç OBJETIVO", soap_result["objetivo"], "Sinais vitais, exame f√≠sico e observa√ß√µes"),
                        ("üéØ AVALIA√á√ÉO", soap_result["avaliacao"], "Hip√≥tese diagn√≥stica e racioc√≠nio cl√≠nico"),
                        ("üìã PLANO", soap_result["plano"], "Tratamento, medica√ß√µes e orienta√ß√µes")
                    ]
                    
                    for title, content, description in sections:
                        with st.expander(f"{title} - {description}", expanded=True):
                            if content:
                                # Dividir o conte√∫do em linhas e processar
                                lines = content.split('\n')
                                formatted_items = []
                                
                                for line in lines:
                                    line = line.strip()
                                    if line:
                                        # Remover marcadores existentes e padronizar
                                        if line.startswith('‚Ä¢') or line.startswith('-') or line.startswith('*'):
                                            clean_line = line[1:].strip()
                                        else:
                                            clean_line = line.strip()
                                        
                                        if clean_line:
                                            formatted_items.append(clean_line)
                                
                                if formatted_items:
                                    for item in formatted_items:
                                        st.write(f"‚Ä¢ {item}")
                                else:
                                    st.info("N√£o identificado na transcri√ß√£o")
                            else:
                                st.info("N√£o identificado na transcri√ß√£o")
                    
                    # Bot√£o de download do resultado
                    soap_text = f"""AN√ÅLISE SOAP - {datetime.now().strftime('%d/%m/%Y %H:%M')}

SUBJETIVO:
{soap_result["subjetivo"]}

OBJETIVO:
{soap_result["objetivo"]}

AVALIA√á√ÉO:
{soap_result["avaliacao"]}

PLANO:
{soap_result["plano"]}

---
Gerado pelo MaisGestorHealth
"""
                    
                    st.download_button(
                        label="üì• Baixar An√°lise SOAP",
                        data=soap_text,
                        file_name=f"analise_soap_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                        mime="text/plain"
                    )
    
    # Footer discreto
    st.markdown("---")
    st.markdown("*MaisGestorHealth ‚Ä¢ Desenvolvido para profissionais de sa√∫de")

if __name__ == "__main__":
    main()
